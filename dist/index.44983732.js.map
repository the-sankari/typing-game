{"mappings":"AAAA,MAAM,oBAAoB,GAAG,+BAA+B;AAC5D,MAAM,mBAAmB,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC;AACnE,MAAM,iBAAiB,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC;AAC/D,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC;AAErD,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAM;IAChD,MAAM,UAAU,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,MAAM,CAAC;IAC/D,MAAM,UAAU,GAAG,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;IAEpD,IAAI,OAAO,GAAG,IAAI;IAClB,UAAU,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,KAAK,GAAK;QAC3C,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC;QACnC,IAAI,SAAS,IAAI,IAAI,EAAE;YACrB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC;YACzC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC;YAC3C,OAAO,GAAG,KAAK;SAChB,MAAM,IAAI,SAAS,KAAK,aAAa,CAAC,SAAS,EAAE;YAChD,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;YACtC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC;SAC5C,MAAM;YACL,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC;YACzC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;YACxC,OAAO,GAAG,KAAK;SAChB;KACF,CAAC;IAEF,IAAI,OAAO,EAAE,cAAc,EAAE;CAC9B,CAAC;AAEF,SAAS,cAAc,GAAG;IACxB,OAAO,KAAK,CAAC,oBAAoB,CAAC,CAC/B,IAAI,CAAC,CAAA,QAAQ,GAAI,QAAQ,CAAC,IAAI,EAAE,CAAC,CACjC,IAAI,CAAC,CAAA,IAAI,GAAI,IAAI,CAAC,OAAO,CAAC,CAAA;CAC9B;AAED,eAAe,cAAc,GAAG;IAC9B,MAAM,KAAK,GAAG,MAAM,cAAc,EAAE;IACpC,mBAAmB,CAAC,SAAS,GAAG,EAAE;IAClC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAA,SAAS,GAAI;QACnC,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC;QACpD,aAAa,CAAC,SAAS,GAAG,SAAS;QACnC,mBAAmB,CAAC,WAAW,CAAC,aAAa,CAAC;KAC/C,CAAC;IACF,iBAAiB,CAAC,KAAK,GAAG,IAAI;IAC9B,UAAU,EAAE;CACb;AAED,IAAI,SAAS;AACb,SAAS,UAAU,GAAG;IACpB,YAAY,CAAC,SAAS,GAAG,CAAC;IAC1B,SAAS,GAAG,IAAI,IAAI,EAAE;IACtB,WAAW,CAAC,IAAM;QAChB,KAAK,CAAC,SAAS,GAAG,YAAY,EAAE;KACjC,EAAE,IAAI,CAAC;CACT;AAED,SAAS,YAAY,GAAG;IACtB,OAAO,IAAI,CAAC,KAAK,CAAC,AAAC,CAAA,IAAI,IAAI,EAAE,GAAG,SAAS,CAAA,GAAI,IAAI,CAAC,CAAA;CACnD;AAED,cAAc,EAAE","sources":["src/script.js"],"sourcesContent":["const RANDOM_QUOTE_API_URL = 'http://api.quotable.io/random'\nconst quoteDisplayElement = document.getElementById('quoteDisplay')\nconst quoteInputElement = document.getElementById('quoteInput')\nconst timerElement = document.getElementById('timer')\n\nquoteInputElement.addEventListener('input', () => {\n  const arrayQuote = quoteDisplayElement.querySelectorAll('span')\n  const arrayValue = quoteInputElement.value.split('')\n\n  let correct = true\n  arrayQuote.forEach((characterSpan, index) => {\n    const character = arrayValue[index]\n    if (character == null) {\n      characterSpan.classList.remove('correct')\n      characterSpan.classList.remove('incorrect')\n      correct = false\n    } else if (character === characterSpan.innerText) {\n      characterSpan.classList.add('correct')\n      characterSpan.classList.remove('incorrect')\n    } else {\n      characterSpan.classList.remove('correct')\n      characterSpan.classList.add('incorrect')\n      correct = false\n    }\n  })\n\n  if (correct) renderNewQuote()\n})\n\nfunction getRandomQuote() {\n  return fetch(RANDOM_QUOTE_API_URL)\n    .then(response => response.json())\n    .then(data => data.content)\n}\n\nasync function renderNewQuote() {\n  const quote = await getRandomQuote()\n  quoteDisplayElement.innerHTML = ''\n  quote.split('').forEach(character => {\n    const characterSpan = document.createElement('span')\n    characterSpan.innerText = character\n    quoteDisplayElement.appendChild(characterSpan)\n  })\n  quoteInputElement.value = null\n  startTimer()\n}\n\nlet startTime\nfunction startTimer() {\n  timerElement.innerText = 0\n  startTime = new Date()\n  setInterval(() => {\n    timer.innerText = getTimerTime()\n  }, 1000)\n}\n\nfunction getTimerTime() {\n  return Math.floor((new Date() - startTime) / 1000)\n}\n\nrenderNewQuote()"],"names":[],"version":3,"file":"index.44983732.js.map","sourceRoot":"/__parcel_source_root/"}